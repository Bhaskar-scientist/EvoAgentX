{
  "0": [
    "You are a software architect. Your task is to create a detailed implementation plan for the given problem.\n\nProblem: {problem}\n\nPlease provide a comprehensive implementation plan including:\n1. Problem breakdown\n2. Algorithm or approach selection\n3. Implementation steps\n4. Potential edge cases and solutions",
    "**\n\nAs a Python programming expert, your task is to develop a thorough and innovative implementation plan that addresses the following problem: {problem}. Your plan should not only focus on the technical aspects but also emphasize the importance of clear documentation, robust error handling, and modular design principles. \n\nPlease provide a comprehensive implementation plan that includes:\n\n1. **Problem Breakdown:** Clearly define the problem, identifying key components and requirements.\n2. **Algorithm Selection:** Choose an appropriate algorithm or approach that effectively addresses the problem, justifying your choice.\n3. **Implementation Steps:** Outline a step-by-step guide for coding the solution, ensuring to highlight any specific Python features or libraries that could enhance the implementation.\n4. **Error Handling Strategies:** Discuss potential errors or exceptions that may arise during implementation and propose effective handling strategies.\n5. **Testing and Validation:** Describe how you would validate the solution, including test cases and expected outcomes to ensure functionality and robustness.\n6. **User Experience Considerations:** Consider how the output will be presented to users and any features that could improve user interaction.\n\nFeel free to incorporate best practices for efficient coding and emphasize the importance of maintainability and scalability in your approach!",
    "**Enhanced Instruction for Language Model Prompting:**\n\nYou are a software architect tasked with developing a comprehensive implementation plan for the following programming problem: {problem}. Your goal is to create a clear and structured response that will guide a developer through the process of solving this problem efficiently and effectively. Please ensure your response includes the following elements:\n\n1. **Problem Breakdown:**\n   - Clearly define the problem and its requirements.\n   - Identify key components or subproblems that need to be addressed.\n   - Discuss the inputs and expected outputs of the program.\n\n2. **Algorithm or Approach Selection:**\n   - Evaluate different algorithms or approaches that could be applied to solve the problem.\n   - Justify your choice of algorithm based on factors such as time complexity, space complexity, and ease of implementation.\n   - Provide any relevant pseudocode or flowchart to illustrate your proposed solution.\n\n3. **Implementation Steps:**\n   - Outline a step-by-step plan for implementing the solution, including:\n     - Setting up the development environment.\n     - Writing modular code with clear function definitions.\n     - Incorporating error handling and input validation.\n     - Implementing test-driven development practices to ensure code reliability.\n   - Emphasize the importance of maintaining code readability and documentation throughout the process.\n\n4. **Potential Edge Cases and Solutions:**\n   - Identify possible edge cases that could arise during execution (e.g., invalid inputs, boundary conditions).\n   - Propose strategies for handling these edge cases gracefully.\n   - Discuss how to test the implementation against these edge cases to ensure robustness.\n\n**Tip:** Make sure to provide detailed explanations and examples where necessary to enhance understanding. Aim for clarity and thoroughness in your response, making it accessible to both novice and experienced programmers.",
    "**\n\nYou are a highly skilled software architect tasked with designing a robust implementation plan for a critical software solution in a high-stakes environment where accuracy and efficiency are paramount. The solution will be used in a financial institution where errors could lead to significant monetary losses and reputational damage.\n\n**Problem:** {problem}\n\nYour comprehensive implementation plan must include the following components:\n\n1. **Problem Breakdown:** Clearly outline the components of the problem, identifying key features and requirements that must be addressed. Consider the implications of each component in the context of a high-stakes financial setting.\n\n2. **Algorithm or Approach Selection:** Justify your choice of algorithm or approach based on efficiency, reliability, and scalability. Discuss how this choice mitigates risks associated with financial transactions.\n\n3. **Implementation Steps:** Provide a detailed sequence of steps necessary for implementing the solution. Include code structure, modular design principles, and how you would ensure clear documentation and error handling.\n\n4. **Potential Edge Cases and Solutions:** Identify potential edge cases that could arise during implementation or execution. Propose strategies for addressing these edge cases to ensure the system remains robust and fault-tolerant under various conditions.\n\nRemember, the stakes are high, and your implementation plan must reflect a commitment to quality, security, and user-friendly outputs.",
    "**Enhanced Instruction for Language Model Prompting:**\n\n---\n\n**Instruction:**\n\nYou are a software architect and Python programming expert. Your task is to develop a thorough implementation strategy for the specified problem, ensuring that the solution is well-documented, modular, and adheres to best practices in Python programming. \n\n**Please provide a comprehensive implementation plan that includes the following:**\n\n1. **Problem Breakdown:**\n   - Clearly define the problem and its requirements.\n   - Identify key components and functionalities that need to be addressed.\n\n2. **Algorithm or Approach Selection:**\n   - Propose suitable algorithms or methodologies for solving the problem.\n   - Justify your choice of algorithm, considering efficiency and readability.\n\n3. **Implementation Steps:**\n   - Outline a step-by-step guide to coding the solution.\n   - Include details on function creation, module organization, and necessary libraries or frameworks.\n   - Highlight any testing strategies, especially focusing on test-driven development.\n\n4. **Potential Edge Cases and Solutions:**\n   - Enumerate possible edge cases that could arise during execution.\n   - Provide strategies or code snippets to handle these edge cases effectively.\n   - Discuss error handling mechanisms to ensure robust functionality.\n\n5. **Documentation and Best Practices:**\n   - Explain how you plan to document the code and why documentation is critical.\n   - Suggest coding standards and practices to follow for maintainability and readability.\n\n---\n\nThis enhanced instruction aims to guide the Language Model in generating a more structured and detailed implementation plan that not only solves the problem but also adheres to high standards of software development.",
    "**\n\nYou are a software architect tasked with developing a Python-based solution for a critical real-world problem that could impact the efficiency of a large-scale e-commerce platform during peak shopping seasons, such as Black Friday or Cyber Monday. The system must handle high volumes of user requests while ensuring data integrity and user satisfaction. \n\n**Problem:** {problem}\n\nPlease provide a comprehensive implementation plan including:\n\n1. **Problem Breakdown:** Clearly define the components of the problem, identifying key functionalities and requirements essential for the e-commerce platform during high traffic periods.\n\n2. **Algorithm or Approach Selection:** Choose appropriate algorithms or architectural patterns that will optimize performance and scalability. Justify your choices based on expected user load and system constraints.\n\n3. **Implementation Steps:** Outline step-by-step procedures for coding the solution, including module design, integration points, and testing strategies that align with best practices in Python programming.\n\n4. **Potential Edge Cases and Solutions:** Identify possible edge cases that may arise during peak usage, such as handling simultaneous user requests, data corruption, and system failures. Propose robust error handling and recovery strategies to address these scenarios effectively.\n\n**Tip:** This solution must be reliable and efficient, as any failure could lead to significant financial losses and damage the company's reputation.",
    "**\n\nYou are a highly skilled software architect faced with a challenging scenario where a critical software system is failing in real-time, jeopardizing the operations of a large-scale online education platform. The platform relies on efficient Python programming for its functionality, supporting thousands of users simultaneously. Your mission is to create a detailed implementation plan to address a complex problem related to the platformâ€™s user authentication module, which is currently experiencing significant security vulnerabilities and performance issues.\n\n**Problem:** {problem}\n\nPlease provide a comprehensive implementation plan including:\n\n1. **Problem Breakdown:**\n   - Identify the key components of the user authentication module that are contributing to security vulnerabilities and performance issues.\n   - Analyze the current system architecture and how it impacts user experience and security.\n\n2. **Algorithm or Approach Selection:**\n   - Evaluate different algorithms for secure user authentication, such as OAuth, JWT, and multi-factor authentication.\n   - Select the most suitable approach based on security, performance, and user experience.\n\n3. **Implementation Steps:**\n   - Outline a step-by-step plan to redesign and implement the authentication module, including necessary coding practices like error handling and documentation.\n   - Include how to integrate testing phases to ensure the new implementation is robust.\n\n4. **Potential Edge Cases and Solutions:**\n   - Consider various edge cases such as failed login attempts, session hijacking, and database failures.\n   - Propose strategies to handle these edge cases effectively to maintain system integrity and user trust.\n\nThis task is critical as the successful implementation will restore confidence in the platformâ€™s security and ensure uninterrupted service for its users.",
    "**Enhanced Instruction Prompt for Language Model:**\n\nYou are a seasoned software architect with extensive experience in Python programming. Your task is to create a detailed implementation plan for the given problem. The plan should serve as a roadmap for developers looking to enhance their coding skills through clear documentation, robust error handling, and modular design.\n\n**Problem:** {problem}\n\nPlease provide a comprehensive implementation plan that includes:\n\n1. **Problem Breakdown**: Identify and explain the key components and requirements of the problem.\n2. **Algorithm or Approach Selection**: Choose a suitable algorithm or programming methodology. Justify your selection based on efficiency, clarity, and maintainability.\n3. **Implementation Steps**: Outline a step-by-step guide on how to implement the solution, including code snippets where appropriate.\n4. **Potential Edge Cases and Solutions**: Identify possible edge cases that may arise during implementation and propose strategies to handle them effectively.\n\nRemember to emphasize best practices in Python programming, such as clear function documentation, error handling, and test-driven development, ensuring that the implementation is not only functional but also user-friendly and maintainable.",
    "### New Instruction for Language Model Prompting:\n\n---\n\n**Instruction:**\n\nYou are a highly skilled software architect faced with a critical task that could impact the success of a major technology project. The project involves developing a robust Python application that enhances users' programming skills through interactive coding challenges. Your implementation plan will be central to the project's success and must ensure that the application is user-friendly, efficient, and maintainable.\n\n**Problem:** {problem}\n\nPlease provide a comprehensive implementation plan that includes:\n\n1. **Problem Breakdown:** Clearly delineate the various components and requirements of the problem, highlighting the functionalities the application must support.\n\n2. **Algorithm or Approach Selection:** Identify and justify the algorithmic approaches or programming paradigms that are most suitable for solving the problem effectively.\n\n3. **Implementation Steps:** Outline a step-by-step strategy to execute the plan, detailing the coding practices you will employ, including test-driven development and modular design.\n\n4. **Potential Edge Cases and Solutions:** Anticipate potential edge cases that could arise during implementation or user interaction, and propose robust handling strategies to ensure the application remains stable and user-friendly.\n\n**High Stakes Scenario:** The success of this application will be evaluated in a prestigious programming competition, where it will be judged not only on functionality but also on user experience and performance under pressure. Your implementation plan must be thorough and well-structured to maximize the chance of winning this competition.\n\n---\n\nThis instruction sets a high-stakes scenario that requires the language model to provide a detailed and thoughtful implementation plan, considering the complexities and potential challenges the project may face."
  ],
  "1": [
    "You are a software developer. Your task is to implement the code based on the provided problem and implementation plan.\n\nProblem: {problem}\nImplementation Plan: {plan}\n\nPlease provide the implementation code with appropriate comments.",
    "**New Instruction Prompt for Language Model:**\n\n---\n\n**High-Stakes Coding Challenge:**\n\nYou are a lead software developer at a tech startup that is on the verge of launching a critical application for a client who requires robust and efficient Python code. This application must not only meet strict functional requirements but also be highly reliable, as it will be used in a production environment that handles sensitive user data.\n\n**Task:**\n\nYour task is to implement the code based on the provided problem description and implementation plan. The code you write must adhere to best practices in Python programming, including:\n\n- Clear and comprehensive function documentation.\n- Robust error handling to ensure stability and user-friendly outputs.\n- A modular design to facilitate easy maintenance and scalability.\n\nThe success of the launch depends on your ability to deliver high-quality code that functions seamlessly. Any bugs or inefficiencies could lead to significant financial losses and damage to the company's reputation.\n\n**Problem:** {problem}\n\n**Implementation Plan:** {plan}\n\nPlease provide the complete implementation code with appropriate comments, ensuring that it is well-structured and easy to understand for other developers who may work on it in the future.\n\n---\n\n**End of Instruction Prompt** \n\nThis instruction emphasizes the importance of the task and the need for high-quality code, motivating the Language Model to deliver a more thorough and polished solution.",
    "To enhance the instruction for prompting a Language Model (LM) to better solve the task of implementing Python code based on a given problem and implementation plan, we can incorporate elements that emphasize the need for clarity, error handling, modular design, and efficient coding practices. Here's a revised instruction:\n\n---\n\n**Enhanced Instruction:**\n\nYou are a skilled software developer tasked with implementing Python code based on the provided problem statement and implementation plan. Your goal is to write clean, modular code that is easy to understand and maintain. Please follow these guidelines:\n\n1. **Code Implementation**: Write the code to solve the given problem, ensuring that each function has a clear purpose and adheres to the principles of modular design.\n\n2. **Documentation**: Include comprehensive docstrings for each function to explain its purpose, parameters, and return values. This should help users understand the functionality without needing to read the code in detail.\n\n3. **Error Handling**: Implement robust error handling to gracefully manage potential issues. Use exceptions where appropriate and provide informative error messages to assist users in troubleshooting.\n\n4. **Testing**: Include a few basic test cases to demonstrate that your code works as intended. This can be done through simple assertions or a testing framework such as `unittest`.\n\n5. **User-Friendly Output**: Ensure that the output of your program is clear and user-friendly, presenting information in a way that is easy to interpret.\n\n**Problem**: {problem}\n\n**Implementation Plan**: {plan}\n\nPlease provide the implementation code with appropriate comments, following the above guidelines.\n\n--- \n\nThis enhanced instruction clarifies expectations and guides the LM towards producing high-quality, maintainable, and user-friendly code, addressing the task's requirements effectively.",
    "**\n\n---\n\n**High-Stakes Scenario:**\n\nYou are a lead software developer at a tech startup that is about to launch a critical product. This product relies on a robust Python module that will handle user data processing efficiently and securely. Any errors in the code could lead to data breaches or user dissatisfaction, potentially jeopardizing the entire launch and the companyâ€™s reputation. \n\n**Task:**\n\nYour task is to implement a Python module that processes user data by performing the following operations:\n\n1. Validate the input data to ensure it meets specific criteria (e.g., non-empty fields, correct data types).\n2. Handle potential errors gracefully, providing meaningful error messages to the user.\n3. Structure the code in a modular fashion, allowing for easy testing and maintenance.\n4. Document each function clearly, including description, parameters, return values, and any exceptions raised.\n\n**Problem:**\n\nYou need to create a function that takes a list of user dictionaries and calculates the average age of users, filtering out any entries that do not have a valid age.\n\n**Implementation Plan:**\n\n1. Define a function named `calculate_average_age`.\n2. Validate that the input is a list.\n3. Iterate through the list and check for valid age entries (e.g., age is a number and within a reasonable range).\n4. Calculate the average age of valid entries and handle cases where no valid ages are found.\n5. Document the function thoroughly.\n\n**Please provide the implementation code along with appropriate comments that explain each step of your logic and error handling. Make sure your solution is efficient and follows best coding practices.**\n\n--- \n\nThis instruction emphasizes the importance of creating a reliable solution in a high-stakes scenario, pushing the language model to focus on quality, error handling, and documentation.",
    "Hereâ€™s a refined instruction that can be used to prompt a Language Model for the task described:\n\n---\n\n**Instruction for Language Model Prompt:**\n\nYou are a skilled Python developer tasked with implementing a solution based on the following problem statement and implementation plan. Your goal is to write clear, modular, and efficient code that adheres to best practices in Python programming, including comprehensive function documentation and robust error handling.\n\n**Problem Statement:** {problem}\n\n**Implementation Plan:** {plan}\n\nPlease generate the implementation code, ensuring that you include appropriate comments for clarity and maintainability. Focus on creating user-friendly outputs and consider including test cases to validate your solution.\n\n--- \n\nThis instruction is designed to be clear and concise while emphasizing the key aspects of the task, such as documentation, error handling, and modularity.",
    "Based on the provided information and the task of generating a new instruction to prompt a Language Model (LM) for better solutions, hereâ€™s a refined instruction that emphasizes clarity, educational value, and best practices in Python programming:\n\n---\n\n**Enhanced Instruction:**\n\nYou are an experienced Python educator and software developer. Your task is to transform the given problem statement and implementation plan into a well-structured Python function. \n\n**Key Requirements:**\n1. **Clear Documentation:** Include docstrings for the function, explaining its purpose, parameters, return values, and any exceptions that may be raised.\n2. **Robust Error Handling:** Implement error handling to manage potential edge cases gracefully.\n3. **Modular Design:** Structure the code into logical sections or helper functions if necessary.\n4. **Test Cases:** At the end of your implementation, provide a set of test cases that demonstrate the function's correctness and showcase its behavior with various input scenarios.\n5. **User-Friendly Output:** Ensure that the functionâ€™s output is easy to understand for users.\n\n**Problem:** {problem}  \n**Implementation Plan:** {plan}\n\nPlease provide your implementation code along with appropriate comments and adhere to the above requirements to enhance clarity and usability.\n\n--- \n\nThis instruction encourages the LM to generate solutions that are not only functional but also educational and user-friendly, aligning with the dataset's goals of improving Python programming skills.",
    "To create a more effective instruction for prompting a Language Model (LM) to solve the task of generating Python code, we can refine the basic instruction by including additional context and specific requirements. Hereâ€™s the enhanced instruction:\n\n---\n\n**Enhanced Instruction:**\n\nYou are an experienced software developer tasked with implementing Python code based on the provided problem statement and implementation plan. Your solution should focus on the following key aspects:\n\n1. **Clear Function Documentation**: Each function must include a docstring that describes its purpose, parameters, return values, and any exceptions it may raise.\n  \n2. **Robust Error Handling**: Implement error handling to manage potential exceptions gracefully. This includes using try-except blocks where appropriate and providing meaningful error messages.\n\n3. **Modular Design**: Structure your code into modular functions to promote reusability and maintainability. Each function should perform a single task.\n\n4. **Test-Driven Development**: Include a set of unit tests to validate the functionality of your code. Ensure that these tests cover various edge cases.\n\n5. **User-Friendly Outputs**: The output of the program should be clear and informative for the end user.\n\n6. **Performance Considerations**: Ensure that your code is optimized for performance where applicable, without sacrificing readability.\n\n**Problem**: {problem}\n\n**Implementation Plan**: {plan}\n\nPlease provide the implementation code adhering to these principles and include appropriate comments to explain the logic behind your code.\n\n--- \n\nBy incorporating these additional criteria, the instruction becomes more comprehensive and guides the LM to produce high-quality code that meets educational standards for Python programming.",
    "Based on the provided information about the dataset and the basic instruction, here's a new instruction designed to prompt a Language Model to better solve the task of implementing Python code:\n\n---\n\n**Enhanced Instruction for Language Model:**\n\nYou are an experienced Python developer tasked with implementing a function based on the specified problem statement and a detailed implementation plan. Your goal is to produce clean, efficient, and well-documented code that adheres to best practices in software development. \n\n**Guidelines for Implementation:**\n\n1. **Clarity and Readability**: Ensure that your code is easy to read and understand. Use meaningful variable and function names.\n  \n2. **Function Documentation**: Provide comprehensive docstrings for each function, describing its purpose, parameters, return values, and any exceptions that may be raised.\n\n3. **Error Handling**: Implement robust error handling to manage potential issues gracefully. Use try-except blocks where applicable and raise informative exceptions when necessary.\n\n4. **Modular Design**: Structure your code into distinct functions or classes to promote modularity. Each function should have a single responsibility.\n\n5. **Test-Driven Development**: Include a set of unit tests that validate the functionality of your code. Ensure that the tests cover various edge cases and typical usage scenarios.\n\n6. **User-Friendly Outputs**: Ensure that the output of your functions is user-friendly and informative.\n\n7. **Performance Considerations**: Optimize your code for efficiency where applicable, keeping in mind both time and space complexity.\n\n**Task Specification:**\n\n- **Problem**: {problem}\n- **Implementation Plan**: {plan}\n\nPlease provide the implementation code that adheres to these guidelines, along with appropriate comments for clarity.\n\n---\n\nThis enhanced instruction aims to provide clearer expectations and guidelines for the Language Model, ensuring that the code produced is of high quality and suitable for educational purposes.",
    "Hereâ€™s an enhanced and detailed instruction for prompting a Language Model to better address the programming task described:\n\n---\n\n**Instruction for Language Model Prompt:**\n\nYou are a skilled software developer tasked with creating a well-structured Python program based on a specified problem and a detailed implementation plan. Your goal is to produce clear, efficient, and robust code that adheres to best practices in programming.\n\n**Task Overview:**\n- **Problem Statement:** {problem}\n- **Implementation Plan:** {plan}\n\n**Requirements for the Implementation:**\n1. **Code Clarity:** Ensure that all code is clean and easy to read. Use descriptive variable and function names.\n2. **Function Documentation:** Each function should have a docstring that explains its purpose, parameters, return values, and any exceptions raised.\n3. **Error Handling:** Implement robust error handling to manage potential exceptions. Use try-except blocks where necessary to ensure the program can handle unexpected inputs gracefully.\n4. **Modular Design:** Structure the code into well-defined functions or classes to promote reusability and maintainability.\n5. **Test-Driven Development:** Include unit tests for each function to validate correctness. Ensure that tests cover a range of scenarios, including edge cases.\n6. **User-Friendly Outputs:** If the program interacts with users, ensure that outputs are clearly formatted and easy to understand.\n\n**Output Expectations:**\n- Present the complete implementation code, including all specified requirements.\n- Include comments in the code to explain key sections and logic.\n- Provide a separate section for unit tests, showcasing how the code can be tested effectively.\n\n**Example Format:**\n```python\ndef example_function(param1, param2):\n    \"\"\"\n    Brief description of the function.\n    \n    Parameters:\n    param1 (type): Description of param1.\n    param2 (type): Description of param2.\n    \n    Returns:\n    type: Description of the return value.\n    \n    Raises:\n    ExceptionType: Description of conditions under which this exception is raised.\n    \"\"\"\n    # Implementation code here\n    ...\n```\n\n**End of Instruction**\n\n---\n\nThis instruction is designed to guide the Language Model in generating high-quality, maintainable code that meets the outlined educational objectives."
  ]
}