{
    "class_name": "SequentialWorkFlowGraph",
    "goal": "Generate a functional and correct Python code for the given problem.",
    "tasks": [
        {
            "name": "code_generate",
            "description": "Code generation for MBPP.",
            "inputs": [
                {
                    "name": "problem",
                    "type": "str",
                    "description": "The problem to solve.",
                    "required": true
                }
            ],
            "outputs": [
                {
                    "name": "code",
                    "type": "str",
                    "description": "The generated code.",
                    "required": true
                }
            ],
            "prompt": "**Instruction for Language Model (LM):**\n\nCreate a complete and executable Python function that effectively addresses the following problem statement. Ensure that the generated code adheres to Python's syntax and programming conventions, demonstrating clarity and efficiency. Include appropriate variable names to enhance readability, and if applicable, illustrate how your solution can handle varying input scenarios. \n\n**Problem Statement:** {problem}\n\n**Considerations:**\n1. Ensure that the function is well-structured, with a clear definition and return statement.\n2. Include comments in the code to explain the logic and any important steps involved in your solution.\n3. If applicable, consider edge cases and ensure the function can handle them appropriately.\n\nYour output should strictly consist of Python code. Please avoid any additional explanations outside of the code.",
            "system_prompt": null,
            "parse_mode": "str",
            "parse_func": null,
            "parse_title": null,
            "demos": [
                {
                    "source_file": "Benchmark Questions Verification V2.ipynb",
                    "task_id": 283,
                    "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef validate(n):\n",
                    "code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
                    "test_imports": [],
                    "test_list": [
                        "assert validate(1234) == True",
                        "assert validate(51241) == False",
                        "assert validate(321) == True"
                    ],
                    "entry_point": "validate",
                    "canonical_solution": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
                    "test": "def check(candidate):\n    assert validate(1234) == True\n    assert validate(51241) == False\n    assert validate(321) == True\n",
                    "original_prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself."
                },
                {
                    "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
                    "task_id": 308,
                    "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef large_product(nums1, nums2, N):\n",
                    "code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
                    "test_imports": [],
                    "test_list": [
                        "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
                        "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
                        "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
                    ],
                    "entry_point": "large_product",
                    "canonical_solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
                    "test": "def check(candidate):\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n",
                    "original_prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list."
                },
                {
                    "source_file": "Benchmark Questions Verification V2.ipynb",
                    "task_id": 802,
                    "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\ndef count_rotation(arr):\n",
                    "code": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0",
                    "test_imports": [],
                    "test_list": [
                        "assert count_rotation([3,2,1]) == 1",
                        "assert count_rotation([4,5,1,2,3]) == 2",
                        "assert count_rotation([7,8,9,1,2,3]) == 3",
                        "assert count_rotation([1,2,3]) == 0",
                        "assert count_rotation([1,3,2]) == 2"
                    ],
                    "entry_point": "count_rotation",
                    "canonical_solution": "def count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0",
                    "test": "def check(candidate):\n    assert count_rotation([3,2,1]) == 1\n    assert count_rotation([4,5,1,2,3]) == 2\n    assert count_rotation([7,8,9,1,2,3]) == 3\n    assert count_rotation([1,2,3]) == 0\n    assert count_rotation([1,3,2]) == 2\n",
                    "original_prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/"
                },
                {
                    "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
                    "task_id": 310,
                    "prompt": "Write a function to convert a given string to a tuple of characters.\n\ndef string_to_tuple(str1):\n",
                    "code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
                    "test_imports": [],
                    "test_list": [
                        "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
                        "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
                        "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
                    ],
                    "entry_point": "string_to_tuple",
                    "canonical_solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
                    "test": "def check(candidate):\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n",
                    "original_prompt": "Write a function to convert a given string to a tuple of characters."
                }
            ],
            "traces": [],
            "train": []
        }
    ],
    "graph_path": "examples/mipro/output/logs"
}